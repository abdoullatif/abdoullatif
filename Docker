Dockerization

Créer un fichier Dockerfile :
------------------
# Use an official Python runtime as a parent image
FROM python:3.8

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
--------------------

Créer un fichier requirements.txt :

Créer un fichier .dockerignore :
-------------------------
__pycache__
*.pyc
*.pyo
*.pyd
db.sqlite3
--------------------------

Construire l'image Docker :
docker build -t nom_de_votre_projet .

Lancer le conteneur Docker :
docker run -p 8000:8000 nom_de_votre_projet

--------------------------------------------------

Docker pull

docker run --name es01 --net elastic -p 9200:9200 -it docker.elastic.co/elasticsearch/elasticsearch:8.9.1

Docker stop container [name]


docker kill CONTAINER [CONTAINER...]

List des container 

docker ps

docker ps -a

docker ps -a -f status=running


Remove

docker rm [OPTIONS] CONTAINER [CONTAINER...]

-------------------------------------------------------------------------------------

==============  VIDER LE CACHE ==============================
Supprimer les conteneurs arrêtés
docker container prune

Supprimer les images inutilisées
docker image prune
Pour supprimer toutes les images inutilisées (y compris les images de base intermédiaires), utilisez l'option -a :
docker image prune -a

Supprimer les volumes inutilisés
docker volume prune

Supprimer les réseaux inutilisés
docker network prune

Nettoyage complet
docker system prune
Si vous souhaitez également supprimer toutes les images inutilisées, y compris les images de base intermédiaires, utilisez l'option -a :
docker system prune -a

















