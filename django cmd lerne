Install Django
pip install Django

---------------------------------------------------------------------

Create a Django project
django-admin startproject <project_name>

----------------------------------------------------------------------

Make migrations command
python manage.py makemigrations

Migrate Command
python manage.py migrate


===================== Migration
Suprimer les fichier de migration
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc"  -delete
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------



-------------------------------------------------------------------------


Collect static files
python manage.py collectstatic 

Create a Django App
python manage.py startapp <app_name>

Create a superuser
python manage.py createsuperuser

Change the password
python manage.py changepassword <username>

Run server
python manage.py runserver 


--------------------------------------------------------------------

Environnement Virtuel Python

Openclassroom create
virtualenv -p python3 env

Création d'un environnement virtuel :
 A revoir : python -m venv nom_de_lenvironnement

Activation de l'environnement virtuel :
  Sur Windows :
  nom_de_lenvironnement\Scripts\activate
  Sur macOS/Linux :
  source nom_de_lenvironnement/bin/activate

Désactivation de l'environnement virtuel :
deactivate

Installation d'un package dans l'environnement virtuel :
pip install nom_du_package

Exportation des dépendances dans un fichier requirements.txt :
pip freeze > requirements.txt

Installation des dépendances depuis un fichier requirements.txt :
pip install -r requirements.txt


---------------------------------------------------------------------
django debug toolbar
pip install django-debug-toolbar

----------------------------------------------------------------------------

django-admin check                       
Checks the entire Django project for potential problems

django-admin changepassword <username>   
Allows changing a user’s password. It prompts you to enter a new password twice for the given user.

django-admin clearsessions               
Can be run as a cron job or directly to clean out expired sessions.

django-admin collectstatic               
Helps to collect all the static files in the one mentioned directory

django-admin createsuperuser             
Creates a superuser account (a user who has all permissions)

django-admin compilemessages             
Compiles .po files to .mo files for use with builtin gettext support

django-admin createcachetable            
Creates the tables needed to use the SQL cache backend.

django-admin dbshell                     
Runs the command-line client for a specified database, or the default database if none is provided.

django-admin diffsettings                
Displays differences between the current settings.py and Django's default settings.

django-admin dumpdata                    
Output the contents of the database as a fixture of the given format (using each model's default manager unless --all is specified).

django-admin flush                       
Removes ALL DATA from the database, including data added during migrations. Does not achieve a "fresh install" state.

django-admin inspectdb                   
Introspects the database tables in the given database and outputs a Django model module.

django-admin loaddata                    
Installs the named fixture(s) in the database.

django-admin makemessages                
Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) or locale (for projects and applications) directory. You must run this command with one of either the --locale, --exclude, or --all options.

django-admin help                        
display usage information and a list of the commands provided by each application

django-admin makemigrations              
create new migrations to the database based on the changes detected in the models

django-admin migrate                     
synchronize the database state with your current state project models and migrations

django-admin remove_stale_contenttypes   
Deletes stale content types (from deleted models) in your database.

django-admin runserver <port>            
start the development webserver at 127.0.0.1 with the port <port> default 8000

django-admin sendtestemail               
Sends a test email to the email addresses specified as arguments.

django-admin shell                       
Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available. Any standard input is executed as code.

django-admin showmigrations              
Shows all available migrations for the current project.

django-admin sqlflush                    
Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.

django-admin sqlmigrate                  
Prints the SQL statements for the named migration.

django-admin sqlsequencereset            
Prints the SQL statements for resetting sequences for the given app name(s).

django-admin squashmigrations            
Squashes an existing set of migrations (from first until specified) into a single new one.

django-admin startapp <Appname>          
create a new Django application with the specified name

django-admin startproject <ProjectName>  
create a new project directory structure

django-admin testserver                  
Runs a development server with data from the given fixture(s).

django-admin version                     
display the current Django version


-------------------------------------------------------------------

Librairie pour les images
pip install Pillow

-------------------------------------------------------------------
cat requirements.txt

Migration :
python manage.py makemigrations

python manage.py migrate

---------------------------------------------------
python manage.py createsuperuser
---------------------------------------------------

Pour la gestion des taches periodiques

pip install celery django-celery-beat

Utilisation

Au dessus de la fonction
@shared_task


Setting.py

# settings.py

CELERY_BEAT_SCHEDULE = {
    'fetch_kobo_data_every_minute': {
        'task': 'le_module.tasks.nom_de_fonction',  # Chemin vers votre tâche Celery
        'schedule': 60.0,  # Exécuter toutes les 1 minute
    },
}

Lancement du servveur celery

celery -A my_project_name worker --beat

---------------------------------------------------







